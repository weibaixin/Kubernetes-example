
apiVersion: v1
kind: Secret
metadata:
  name: pg-init-script
  namespace: example
type: Opaque             # 常用的base64 编码类型，secret 还有另外2种类型：kubernetes.io/dockerconfigjson 和 kubernetes.io/kubernetes.account.token ，前者可用于存储docker registry 私有仓库信息。
data:
  CreateDB.sql: |-
    Q1JFQVRFIFRBQkxFIHRleHQgKAogICAgaWQgc2VyaWFsIFBSSU1BUlkgS0VZLAogICAgdGV4dCBWQVJDSEFSICggMTAwICkgVU5JUVVFIE5PVCBOVUxMCik7



#  配置方案 secret，主要用来存储一些应用的机密信息，Secret和ConfigMap 非常相似，都能够以文件的形式挂载到容器内部。
#  形式上的差异： ConfigMap -明文； Secret - 加密 (是Base64),但secret加密能力较弱,故使用场景有限。优势是独立的对象类型，故可以方便的对机密的配置信息做权限控制。
#  k8s 使用secret存储镜像拉取凭证的。
#  secret和 configMap 在 deployment上的配置 仅仅在卷的配置上有差异，具体差异见如下第3行注释：

#  volumes:                                    # 以卷的方式使用pg-init-script ConfigMap
#        - name: sqlscript                         # 卷的名字
#         configMap:                              # 如果 kind 是 Secret，这里把 configMap 改成 secret 即可 （其他都一样）
#           name: pg-init-script


# 如上配置生效的命令：
# kubectl apply -f secret.yaml                                                                                                                    
# 编辑集群内的 Postgres deployment工作负载，将volumes字段原来引用ConfigMap 改成 Secret 引用即可。secret 名字还是 pg-init-script

# 命令： kubectl edit deployment postgres -n example
# 之后直接 输入i或a 进行相关修改，之后 按esc ->输入：wq -> 回车  完成修改并退出
# 进入postgres 容器，验证是否把secret挂载到容器系统，命令：
# kubectl exec -it $(kubectl get pods --selector=app=database -n example -o jsonpath="{.items[0].metadata.name}") -n example -- sh
# ls docker-entrypoint-initdb.d
# cat /docker-entrypoint-initdb.d/CreateDB.sql
