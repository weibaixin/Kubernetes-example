# 工作流的名称，会展示在github网页上。
name: build
# 触发工作流的条件：当main分支有新的提交时。
on:
  push:
    branches:
      - "main"

# 为job 配置的全局环境变量，用作镜像tag的前缀。也用于dockerhub 登录
env:
  DOCKERHUB_USERNAME: weibaixin
# 定义任务的运行环境，并且任务由7个step组成。uses字段代表使用了github Action 的某个插件。
jobs:
  docker:
    runs-on: ubuntu-latest   
    steps:
      # 负责将代码检出到运行环境，uses 值是帮助检出代码的插件
      - name: Checkout
        uses: actions/checkout@v3
      # set outputs 阶段 会输出环境变量sha_short，值为short commit id，方便后续引用。用于后续步骤中 docker 镜像标签
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      # 设置 QEMU 环境
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      # 设置 docker Buildx 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # 登录到Docker Hub。登录凭证来自GitHub仓库的机密 DOCKERHUB_TOKEN (具体值来做docker token - 见云原生16讲笔记)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 构建后端代码并将构建的镜像推到github，镜像标签即tag 通过 变量sha_short 的输出动态配置，即每一次代码提交会产生一个镜像版本，镜像版本 short commit id。
      # 构建的步骤：根据dockerfile build -> Docker tag （打镜像标签）-> push 到 docker hub （手动步骤可见第一讲 把业务代码构建为容器镜像，代码docker下）
    
      - name: Build backend and push
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          platforms: linux/amd64,linux/arm64
        # ：后是镜像版本，每一次代码提交 short commit id 对应一个镜像版本
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.vars.outputs.sha_short }}
      - name: Build frontend and push
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.vars.outputs.sha_short }}
     
      # 当 github 有更新代码提交时，即新commit ID时，更新helm下values.yaml中的前后端镜像的版本 即tag，tag 与 short commit ID 关联。      
#- name: Update helm values.yaml
# 使用github action中 yaml-update-action 插件来修改helm 下 values.yaml文件并推送仓库。如果使用gitlab 或tekton 构建镜像，可调用yq命令行工具修改YAML文件，再使用git命令推送仓库。
# uses: fjogeleit/yaml-update-action@main 
#  with:
#    valueFile: 'helm/values.yaml'
#    commitChange: true
#   branch: main
#    message: 'Update Image Version to ${{ steps.vars.outputs.sha_short }}'
#    changes: |
#     {
#        "backend.tag": "${{ steps.vars.outputs.sha_short }}",
#       "frontend.tag": "${{ steps.vars.outputs.sha_short }}"
#      }